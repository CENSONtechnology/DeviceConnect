package com.nttdocomo.android.dconnect.deviceplugin.pebble.profile;import java.util.logging.Logger;import java.util.regex.Matcher;import java.util.regex.Pattern;import android.content.Intent;import com.nttdocomo.android.dconnect.deviceplugin.pebble.PebbleDeviceService;import com.nttdocomo.android.dconnect.deviceplugin.pebble.util.PebbleManager;import com.nttdocomo.android.dconnect.message.MessageUtils;import com.nttdocomo.android.dconnect.profile.NotificationProfile;import com.nttdocomo.dconnect.message.DConnectMessage;/** * Pebble用 Notification Profile. */public class PebbleNotificationProfile extends NotificationProfile {    /** logger. */    private Logger mLogger = Logger.getLogger("Pebble");    @Override    public boolean onPostNotify(final Intent request, final Intent response, final String deviceId,            final NotificationType type, final Direction dir, final String lang, String body, final String tag,            final byte[] iconData) {        if (deviceId == null) {            MessageUtils.setEmptyDeviceIdError(response);            return true;        } else if (!checkDeviceId(deviceId)) {            MessageUtils.setNotFoundDeviceError(response);            return true;        } else if (type == null || type == NotificationType.UNKNOWN) {            createEmptyType(response);            return true;        } else {            // タグをタイトルとしておく            // タグが設定されていない場合にはno titleを表示            String title = tag;            if (title == null) {                title = "no title";            }            if (body == null) {                body = " ";            }            if (body.length() == 0) {                body = " ";            }            PebbleManager mgr = ((PebbleDeviceService) getContext()).getPebbleManager();            mgr.sendNotificationToPebble(title, body);            setResult(response, DConnectMessage.RESULT_OK);            //IDは取得できないので、処理のしようがない            setNotificationId(response, "0");            return true;        }    }    /**     * デバイスIDをチェックする.     *      * @param deviceId デバイスID     * @return <code>deviceId</code>がテスト用デバイスIDに等しい場合はtrue、そうでない場合はfalse     */    private boolean checkDeviceId(final String deviceId) {        String regex = PebbleNetworkServceDiscoveryProfile.DEVICE_ID;        Pattern p = Pattern.compile(regex);        Matcher m = p.matcher(deviceId);        return m.find();    }    /**     * typeが正しい値じゃなかった場合のエラーを作成する.     *      * @param response レスポンスを格納するIntent     */    private void createEmptyType(final Intent response) {        MessageUtils.setInvalidRequestParameterError(response, "Type : UNKNOWN");    }}